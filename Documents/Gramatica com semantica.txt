VARIAVEL -> (int (1) |char (2) ) id (4) [ "["const (3) "]" | (8) ATRIBUICAO ] { ,id (4) [ "["const (3) "]" | (8) ATRIBUICAO] };
ATRIBUICAO -> <- [+|- (6) ] const (7)
CONSTANTE -> (5) final id = [+|- (6) ] const (7) ;

COMANDO ->
           for id (9) <- EXP (10) to EXP¹ (10) [step const (11)] do BLOCO |
           if EXP (12) then BLOCO [else BLOCO] |
           readln "(" id[ "[" (31) EXP (32) "]" ] ")"; |
           write "(" EXP (13) {,EXP (13) } ")"; |
           writeln "(" EXP (13) { ,EXP (13) } ")"; |
           id <- EXP (14); |
           ;
BLOCO -> begin {COMANDO} end; | COMANDO

EXP  -> EXPS (16) [ (<|>|<=|>=|=|<> (15) )EXPS¹ (17) ]
EXPS -> [+|- (18) ] T (19) { (+|-|or (20) ) T¹ (21) }
T    -> F (22) { (*|/|%|and (23) ) F¹ (30) }
F    -> "("EXP (24) ")" | not F¹ (25) | const (26) | id (27) [ (28) "["EXP (29) "]" ]

(1){ VARIAVEL.tipo = int }
(2){ VARIAVEL.tipo = char }
(3){ se
        const.val == 0 ||
        (const.val > 2000 && VARIAVEL.tipo == int ) ||
        (const.val > 4000 && VARIAVEL.tipo == char ) então
            ERRO
    senao
        var.tamanho = const.val
    }
(4){ 
     id.tipo = VARIAVEL.tipo
     id.tamanho = 0
     id.classe = variavel }
(5){ id.tamanho = 0
     id.classe = CONSTANTE }
(6){ negar = true }
(7){ se negar == true então
        se const.tipo != inteiro
            ERRO
        senão
            negar valor }
(8){ ATRIBUICAO.id = VARIAVEL.id }
(9){ 
     se nao existe id então
        ERRO
     senão se id.tipo != inteiro então
        ERRO
   }
        
(10){ se EXP.tipo != inteiro então
        ERRO
      senão
        id.end = EXP.end
    }

(11){ se const.tipo != inteiro então
        ERRO }

(12){ se EXP.tipo != relacional então
        ERRO
    }
(13){ // Posso mostrar o tipo relacional tambem?
     se EXP.tipo == inteiro && EXP.tamanho != 0 então
        ERRO
     senão se EXP.tipo == relacional então
        ERRO? }

(14){ se id.tipo == EXP.tipo
        se id.classe == constante então
            ERRO

        se id.tipo == relacional então 
            ERRO
        senão se EXP.tipo == inteiro então
            se exp.tamanho != 0 && id.tamanho != 0 então
                ERRO
        senão se EXP.tipo == caractere
            se exp.token == const
                se id.tamanho == 0 então
                    se exp.tamanho != 1
                        ERRO
                senão
                    se exp.tamanho+1 > id.tamanho
                        ERRO
            senão se EXP.token == ID
                se id.tamanho < exp.tamanho então
                    ERRO

   }

(15){ exp.tipo = relacional }
(16){ EXP.end = EXPS.end
     EXP.tipo = EXPS.tipo }

(17){ 

    se EXP.tipo != EXPS¹.tipo então
        ERRO
    se EXP.tipo == relacional então
        ERRO
    senão se EXP.tipo == inteiro && ( EXP.tamanho != 0 || EXPS¹.tamanho != 0 ) então
        ERRO

    se EXP.tipo != relacional || EXPS¹.tipo != relacional então
        ERRO
    se EXP.tipo != EXPS¹.tipo então
        ERRO
    senão se EXP.tipo == caractere então
        se EXP.tamanho != 0 && EXPS¹.tamanho != 0 então
            se EXP.tamaho != EXPS¹.tamanho então
                ERRO
        
    }

(18){ negar = true }
(19){ EXPS.tipo = T.tipo
     EXPS.end = T.end
     se negar && !( EXPS.tipo == inteiro && exps.tamanho == 0 ) então
        ERRO
    }

(20){ EXPS.op = operacao }
(21){ EXPS.end = T.end
     EXPS.tipo = T.tipo
     se EXPS.tipo != T¹.tipo
        ERRO
     senão se operacao == (+|-) && T.tipo == relacional
        ERRO
     senão se operacao == or && T.tipo != relacional
        ERRO
    }

(22){ T.tipo = F.tipo
     T.end = F.end }

(23){ T.op = operacao }
(24){ F.end = EXP.end
      F.tipo = EXP.tipo }

(25){ F.tipo = F¹.tipo 
      se F.tipo != relacional then
        ERRO }

(26){ F.tipo = const.tipo
      F.tamanho = 0
      F.token = const // OBS: olhar isso
    }

(27){ 
      se não exite ( id ) então
        ERRO

      F.classe = id.classe
      F.tipo = id.tipo
      F.end = id.end
      F.tamanho = id.tamanho
      F.token = id.token // OBS

      indice = false
    }

(28){ indice = true }
(29){ se EXP.tipo != inteiro && EXP.tamanho != 0 então
        ERRO }

(30){
        se T.tipo != T¹.tipo então
            ERRO
        senão se operacao == (*|/|%) && T.tipo == relacional então
            ERRO
        senão se operacao == or && T.tipo != relacional então
            ERRO
    }
(31){
        se id.tamanho == 0 então
            ERRO
    }
(32){
        se EXP.tipo != inteiro || id.tamanho == 0 então
            ERRO
    }